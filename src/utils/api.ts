// /src/utils/api.ts

import { Prompt } from '../types/ai';

const BASE_URL = process.env.REACT_APP_API_URL || '/api';

async function request<T>(endpoint: string, options?: RequestInit): Promise<T> {
  const response = await fetch(`${BASE_URL}${endpoint}`, options);
  if (!response.ok) {
    const errorBody = await response.json().catch(() => ({ message: 'An unknown error occurred' }));
    throw new Error(errorBody.message || `API request failed: ${response.statusText}`);
  }
  return response.json();
}

// A partial type for creating prompts, as 'id' and 'version' are generated by the server.
type NewPromptData = Omit<Prompt, 'id' | 'version'>;

export const api = {
  getPrompts: (): Promise<Prompt[]> => request('/prompts'),

  getPrompt: (id: string): Promise<Prompt> => request(`/prompts/${id}`),

  savePrompt: (prompt: Prompt): Promise<Prompt> =>
    request(`/prompts/${prompt.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(prompt),
    }),

  createPrompt: (promptData: NewPromptData): Promise<Prompt> =>
    request('/prompts', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(promptData),
    }),
  
  // Add other API methods here as needed
};
